var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const GameUI_1 = require("./script/GameUI");
const GameControl_1 = require("./script/GameControl");
const Bullet_1 = require("./script/Bullet");
const DropBox_1 = require("./script/DropBox");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/GameControl.ts", GameControl_1.default);
        reg("script/Bullet.ts", Bullet_1.default);
        reg("script/DropBox.ts", DropBox_1.default);
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "test/ViewTest.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{"./script/Bullet":7,"./script/DropBox":8,"./script/GameControl":9,"./script/GameUI":10}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
const RedTipMgr_1 = require("./redTip/RedTipMgr");
const ResourceMgr_1 = require("./ResourceMgr");
const PanelRegister_1 = require("./view/base/PanelRegister");
const ViewMgr_1 = require("./view/base/ViewMgr");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        // Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        this.onConfigLoaded();
        ResourceMgr_1.default.ins.startCheck();
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene,true,null,Laya.Handler.create(this,this.openScene));
        ViewMgr_1.default.ins;
        this.createBtn(["btn1", () => { ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL1); }], ["btn2", () => { ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL2); }], ["btn3", () => { ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL3); }]);
        new RedTipMgr_1.default;
    }
    createBtn(...btns) {
        let _x = 0;
        for (let arr of btns) {
            let lab = new Laya.Label;
            lab.color = "#fff";
            lab.text = arr[0];
            Laya.stage.addChild(lab);
            lab.x = _x;
            lab.fontSize = 30;
            _x += 100;
            lab.on(Laya.Event.CLICK, this, arr[1]);
        }
    }
    openScene(sence) {
    }
}
//激活启动类
new Main();
},{"./GameConfig":1,"./ResourceMgr":3,"./redTip/RedTipMgr":5,"./view/base/PanelRegister":15,"./view/base/ViewMgr":16}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ViewMgr_1 = require("./view/base/ViewMgr");
class ResourceMgr {
    constructor() {
        this.clearAtlasQueue = [];
        this.clearQueue = [];
        //大图集引用计数
        this.atlasMap = {};
    }
    static get ins() {
        return ResourceMgr._ins || (ResourceMgr._ins = new ResourceMgr);
    }
    startCheck() {
        Laya.timer.loop(ResourceMgr.checkClearTime, this, this.loopCheckTexture);
        Laya.timer.frameLoop(1, this, this.loopDestroyTexture);
    }
    stopCheck() {
        Laya.timer.clear(this, this.loopCheckTexture);
        Laya.timer.clear(this, this.loopDestroyTexture);
    }
    /**
     * 检测图片资源，如果引用计数为0则添加到销毁队列
     */
    loopCheckTexture() {
        if (this.clearQueue.length)
            return;
        let temp;
        for (let k in Laya.Loader.loadedMap) {
            temp = Laya.Loader.loadedMap[k];
            if (!temp.bitmap)
                continue;
            if (temp["_referenceCount"] == 0 && temp.bitmap["_referenceCount"] == 0) {
                /**简易判断如果是图集就自动不清理（忽略只有一张图片的图集） */
                if (temp.bitmap.width == temp.width
                    && temp.bitmap.height == temp.height) {
                    //压入销毁队列
                    this.clearQueue.push(temp);
                }
            }
        }
    }
    /**
     * 批量销毁图片
     */
    loopDestroyTexture() {
        ViewMgr_1.default.ins.tryDestoryPanel();
        let idx = 0;
        let texture = this.clearQueue.shift();
        while (texture) {
            /**重新判断是否有被引用，避免等待销毁过程中又被引用造成误删 */
            if (texture.bitmap && texture.bitmap["_referenceCount"] == 0) {
                if (texture.url) {
                    // Laya.loader.clearRes(texture.url);
                    this.clearEngineCache(texture.bitmap);
                    idx++;
                }
            }
            if (idx >= ResourceMgr.frameClearCount)
                break;
            texture = this.clearQueue.shift();
        }
        //清理一个大图集
        this.clearOneAtlas();
    }
    //---------------------------------图集---------------------------
    addAtlasRefrence(url) {
        if (this.atlasMap[url]) {
            this.atlasMap[url] = this.atlasMap[url] + 1;
        }
        else {
            this.atlasMap[url] = 1;
        }
    }
    removeAtlasRefrence(url, autoClear = false) {
        if (!this.atlasMap[url]) {
            console.error("图集引用计数逻辑有问题");
        }
        else {
            this.atlasMap[url] = this.atlasMap[url] - 1;
            if (!this.atlasMap[url] && autoClear) {
                this.pushDestoryAtlasQueue(url);
            }
        }
    }
    /**添加清理队列 */
    pushDestoryAtlasQueue(atlas) {
        if (this.clearAtlasQueue.indexOf(atlas) == -1) {
            this.clearAtlasQueue.push(atlas);
        }
    }
    /**执行清理大图集 */
    clearOneAtlas() {
        if (!this.clearAtlasQueue.length)
            return;
        let url;
        //大图集添加引用计数有可能图集还没加载，如果没有资源表示还没加载
        for (let i = 0, len = this.clearAtlasQueue.length; i < len; i++) {
            if (Laya.loader.getRes(this.clearAtlasQueue[i])) {
                url = this.clearAtlasQueue.splice(i, 1)[0];
                break;
            }
        }
        if (url && !this.atlasMap[url]) {
            delete this.atlasMap[url];
            Laya.loader.clearRes(url);
            url = Laya.URL.formatURL(url.substring(0, url.lastIndexOf(".")) + ".png");
            this.clearEngineCache(Laya.loader.getRes(url));
        }
    }
    /**清理引擎的缓存 (彻底清理)*/
    clearEngineCache(texture) {
        if (texture) {
            Laya.Loader.clearRes(texture.url);
            let resource = Laya.Resource.getResourceByID(texture["id"]);
            resource && resource.destroy();
        }
    }
}
//每帧销毁资源最大数量
ResourceMgr.frameClearCount = 2;
ResourceMgr.checkClearTime = 1000;
exports.default = ResourceMgr;
},{"./view/base/ViewMgr":16}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayUtils_1 = require("../utils/ArrayUtils");
const MapStruct_1 = require("../utils/MapStruct");
/**
 * 红点管理
 * 分离显示和数据，每个节点都有一个状态，可以把红点实例与任意节点绑定/解绑
 * 节点可以绑定handle或者通过关系其他节点实现更新，更新是自动的，同时如果有绑定实例，实例的状态也会自动更新
 *
 */
class RedTipBase extends Laya.EventDispatcher {
    constructor() {
        super(...arguments);
        // private tempName:string;
        /**关心列表 */
        this.careMap = new MapStruct_1.MapStruct;
        /**红点状态缓存 */
        this.stateMap = new MapStruct_1.MapStruct;
        /**绑定红点实例 */
        this.bindRedTip = new MapStruct_1.MapStruct;
        /**节点与handle映射 */
        this.registerMap = new MapStruct_1.MapStruct;
    }
    static get ins() {
        let s = this;
        return s["_ins_"] || (s["_ins_"] = new s);
    }
    _init() {
        this.init();
    }
    init() {
        throw new Error("在init方法中绑定触发点或者关系节点");
    }
    /**
     * 注册节点更新handle,没注册也不影响，可以只关心其他节点，节点的创建是任意的
     * @param name
     * @param call
     * @param caller
     */
    register(name, fn, caller) {
        this.registerMap.set(name, [fn, caller]);
        return this.bindHandle.bind(this, name);
    }
    /**
     * 绑定外部触发点，比如游戏模块数据层更新数据，绑定红点触发，在调用完register后面直接调用
     */
    bindHandle(name, eventName, dispatcher) {
        dispatcher.on(eventName, this, this.emit, [name]);
        return this.bindHandle.bind(this, name);
    }
    /**
     * 绑定关心节点
     * @param t
     * @returns
     */
    takecare(t) {
        this.temp = t;
        return this;
    }
    /**
     * 绑定本红点管理器的红点节点
     */
    bindName(...flags) {
        this.tempTarget = flags;
        return this;
    }
    /**
     * 关心节点的红点节点名
     */
    care(...flags) {
        //为关系节点添加改变触发handle
        for (let f of flags) {
            this.temp.on(f, this, this.childrenChange, [this.tempTarget]);
        }
        for (let k of this.tempTarget) {
            let ls = this.careMap.get(k);
            if (ls) {
                let target = ArrayUtils_1.ArrayUtils.find(ls, (v) => {
                    return v[0] == this.temp;
                });
                if (target) {
                    target[1] = ArrayUtils_1.ArrayUtils.unique(target[1].concat(flags));
                }
                else {
                    ls.push([this.temp, flags]);
                }
            }
            else {
                this.careMap.set(k, [[this.temp, flags]]);
            }
        }
    }
    /**
     * 触发红点计算
     * @param flag
     */
    emit(flag) {
        this.change(flag);
    }
    /**
     * 为红点绑定执行handle
     * @param name 红点名
     * @param redTip 红点实例
     */
    bindRed(name, redTip) {
        let ls = this.bindRedTip.get(name);
        if (!ls) {
            this.bindRedTip.set(name, [redTip]);
        }
        else {
            if (ls.indexOf(redTip) == -1) {
                ls.push(redTip);
            }
        }
        redTip.visible = this.getStatus(name);
    }
    /**
     * 解绑红点，只是解绑红点显示，数据层仍会计算
     * @param name
     * @param redTip
     */
    unBindRed(name, redTip) {
        let ls = this.bindRedTip.get(name);
        if (ls) {
            ls.splice(ls.indexOf(redTip), 1);
        }
    }
    /**
     * 获取红点节点状态
     */
    getStatus(flag) {
        let res = !!this.stateMap.get(flag);
        if (res)
            return true;
        let map = this.careMap.get(flag);
        if (map) {
            for (let t of map) {
                for (let k of t[1]) {
                    if (t[0].getStatus(k))
                        return true;
                }
            }
        }
        return false;
    }
    setRedTip(flag, state) {
        let ls = this.bindRedTip.get(flag);
        if (ls) {
            for (let i of ls) {
                i.visible = state;
            }
        }
    }
    /**子节点状态改变，不会触发新计算，拿缓存 */
    childrenChange(targerFlags, status) {
        let value = status;
        for (let k of targerFlags) {
            status = value || this.getStatus(k);
            //设置红点实例
            this.setRedTip(k, status);
            //通知父节点
            this.event(k, value);
        }
    }
    /**本节点状态改变 */
    change(flag) {
        let status = this.calculate(flag);
        this.stateMap.set(flag, status);
        status = status || this.getStatus(flag);
        //更新视图
        this.setRedTip(flag, status);
        //通知父节点
        this.event(flag, status);
    }
    /**重新计算 */
    calculate(flag) {
        if (this.registerMap.has(flag)) {
            let [fn, caller] = this.registerMap.get(flag);
            let res = fn.call(caller);
            // this.stateMap.set(flag, res);
            return res;
        }
        else {
            console.warn(`红点钩子${flag}未添加处理函数`);
            return false;
        }
    }
}
exports.default = RedTipBase;
},{"../utils/ArrayUtils":12,"../utils/MapStruct":13}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RedTipTest_1 = require("./RedTipTest");
class RedTipMgr {
    constructor() {
        this.redArray = [];
        this.init();
    }
    init() {
        this.register();
        for (let i of this.redArray) {
            i._init();
        }
    }
    register() {
        this.redArray = [
            RedTipTest_1.red1.ins,
            RedTipTest_1.red2.ins,
        ];
    }
}
exports.default = RedTipMgr;
},{"./RedTipTest":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../ui/layaMaxUI");
const RedTipBase_1 = require("./RedTipBase");
class RedTipTest extends layaMaxUI_1.ui.test.ViewTestUI {
    constructor() {
        super();
        this.loop();
    }
    open() {
        let img = new Laya.Image;
        img.skin = "comp/image.png";
        this.addChild(img);
    }
    createView(view) {
        super.createView(view);
        red1.ins.bindRed("A1", this.A1);
        red1.ins.bindRed("A2", this.A2);
        red1.ins.bindRed("A3", this.A3);
        red2.ins.bindRed("B1", this.B1);
        red2.ins.bindRed("B2", this.B2);
    }
    loop() {
        Laya.timer.loop(500, this, () => {
            // red1.ins.emit("A2")
            // red1.ins.emit("A1")
            // red1.ins.emit("A3")
            // red2.ins.emit("B1")
            // red2.ins.emit("B2")
            TestMDl.ins.event("UPDATE_INFO");
            TestMDl.ins.event("UPDATE_LV");
        });
    }
}
exports.default = RedTipTest;
class red1 extends RedTipBase_1.default {
    constructor() {
        super();
    }
    init() {
        //绑定handle，触发点
        this.register("A2", this.A2, this)("UPDATE_INFO", TestMDl.ins)("UPDATE_LV", TestMDl.ins);
        this.register("A3", this.A3, this)("UPDATE_LV", TestMDl.ins);
        //构建关心列表
        this.takecare(red2.ins).bindName("A2").care("B1", "B2");
        this.takecare(red2.ins).bindName("A1").care("B1", "B2");
    }
    A1() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
    A2() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
    A3() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
}
exports.red1 = red1;
class red2 extends RedTipBase_1.default {
    constructor() {
        super();
    }
    init() {
        this.register("B1", this.B1, this)("UPDATE_LV", TestMDl.ins);
        this.register("B2", this.B2, this)("UPDATE_INFO", TestMDl.ins);
    }
    B1() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
    B2() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
}
exports.red2 = red2;
class TestMDl extends Laya.EventDispatcher {
    static get ins() {
        return TestMDl["_ins"] || (TestMDl["_ins"] = new TestMDl);
    }
}
},{"../ui/layaMaxUI":11,"./RedTipBase":4}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 子弹脚本，实现子弹飞行逻辑及对象池回收机制
 */
class Bullet extends Laya.Script {
    constructor() { super(); }
    onEnable() {
        //设置初始速度
        var rig = this.owner.getComponent(Laya.RigidBody);
        rig.setVelocity({ x: 0, y: -10 });
    }
    onTriggerEnter(other, self, contact) {
        //如果被碰到，则移除子弹
        this.owner.removeSelf();
    }
    onUpdate() {
        //如果子弹超出屏幕，则移除子弹
        if (this.owner.y < -10) {
            this.owner.removeSelf();
        }
    }
    onDisable() {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("bullet", this.owner);
    }
}
exports.default = Bullet;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameUI_1 = require("./GameUI");
/**
 * 掉落盒子脚本，实现盒子碰撞及回收流程
 */
class DropBox extends Laya.Script {
    constructor() {
        super();
        /**盒子等级 */
        this.level = 1;
    }
    onEnable() {
        /**获得组件引用，避免每次获取组件带来不必要的查询开销 */
        this._rig = this.owner.getComponent(Laya.RigidBody);
        this.level = Math.round(Math.random() * 5) + 1;
        this._text = this.owner.getChildByName("levelTxt");
        this._text.text = this.level + "";
    }
    onUpdate() {
        //让持续盒子旋转
        this.owner.rotation++;
    }
    onTriggerEnter(other, self, contact) {
        var owner = this.owner;
        if (other.label === "buttle") {
            //碰撞到子弹后，增加积分，播放声音特效
            if (this.level > 1) {
                this.level--;
                this._text.changeText(this.level + "");
                owner.getComponent(Laya.RigidBody).setVelocity({ x: 0, y: -10 });
                Laya.SoundManager.playSound("sound/hit.wav");
            }
            else {
                if (owner.parent) {
                    let effect = Laya.Pool.getItemByCreateFun("effect", this.createEffect, this);
                    effect.pos(owner.x, owner.y);
                    owner.parent.addChild(effect);
                    effect.play(0, true);
                    owner.removeSelf();
                    Laya.SoundManager.playSound("sound/destroy.wav");
                }
            }
            GameUI_1.default.instance.addScore(1);
        }
        else if (other.label === "ground") {
            //只要有一个盒子碰到地板，则停止游戏
            owner.removeSelf();
            GameUI_1.default.instance.stopGame();
        }
    }
    /**使用对象池创建爆炸动画 */
    createEffect() {
        let ani = new Laya.Animation();
        ani.loadAnimation("test/TestAni.ani");
        ani.on(Laya.Event.COMPLETE, null, recover);
        function recover() {
            ani.removeSelf();
            Laya.Pool.recover("effect", ani);
        }
        return ani;
    }
    onDisable() {
        //盒子被移除时，回收盒子到对象池，方便下次复用，减少对象创建开销。
        Laya.Pool.recover("dropBox", this.owner);
    }
}
exports.default = DropBox;
},{"./GameUI":10}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 游戏控制脚本。定义了几个dropBox，bullet，createBoxInterval等变量，能够在IDE显示及设置该变量
 * 更多类型定义，请参考官方文档
 */
class GameControl extends Laya.Script {
    constructor() {
        super();
        /** @prop {name:createBoxInterval,tips:"间隔多少毫秒创建一个下跌的容器",type:int,default:1000}*/
        this.createBoxInterval = 1000;
        /**开始时间*/
        this._time = 0;
        /**是否已经开始游戏 */
        this._started = false;
    }
    onEnable() {
        this._time = Date.now();
        this._gameBox = this.owner.getChildByName("gameBox");
        this.createBox();
    }
    onUpdate() {
        //每间隔一段时间创建一个盒子
        let now = Date.now();
        if (now - this._time > this.createBoxInterval) {
            this._time = now;
            this.createBox();
        }
    }
    createBox() {
        //使用对象池创建盒子
        let box = Laya.Pool.getItemByCreateFun("dropBox", this.dropBox.create, this.dropBox);
        box.pos(Math.random() * (Laya.stage.width - 100), -100);
        this._gameBox.addChild(box);
    }
    onStageClick(e) {
        //停止事件冒泡，提高性能，当然也可以不要
        // e.stopPropagation();
        //舞台被点击后，使用对象池创建子弹
        let flyer = Laya.Pool.getItemByCreateFun("bullet", this.bullet.create, this.bullet);
        flyer.pos(Laya.stage.mouseX, Laya.stage.mouseY);
        this._gameBox.addChild(flyer);
        console.log("click");
    }
    /**开始游戏，通过激活本脚本方式开始游戏*/
    startGame() {
        if (!this._started) {
            this._started = true;
            this.enabled = true;
        }
    }
    /**结束游戏，通过非激活本脚本停止游戏 */
    stopGame() {
        this._started = false;
        this.enabled = false;
        this.createBoxInterval = 1000;
        this._gameBox.removeChildren();
    }
}
exports.default = GameControl;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("./../ui/layaMaxUI");
const GameControl_1 = require("./GameControl");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
class GameUI extends layaMaxUI_1.ui.test.TestSceneUI {
    constructor() {
        super();
        GameUI.instance = this;
        //关闭多点触控，否则就无敌了
        Laya.MouseManager.multiTouchEnabled = false;
    }
    onEnable() {
        this._control = this.getComponent(GameControl_1.default);
        //点击提示文字，开始游戏
        this.tipLbll.on(Laya.Event.CLICK, this, this.onTipClick);
    }
    onTipClick(e) {
        this.tipLbll.visible = false;
        this._score = 0;
        this.scoreLbl.text = "";
        this._control.startGame();
    }
    /**增加分数 */
    addScore(value = 1) {
        this._score += value;
        this.scoreLbl.changeText("分数：" + this._score);
        //随着分数越高，难度增大
        if (this._control.createBoxInterval > 600 && this._score % 20 == 0)
            this._control.createBoxInterval -= 20;
    }
    /**停止游戏 */
    stopGame() {
        this.tipLbll.visible = true;
        this.tipLbll.text = "游戏结束了，点击屏幕重新开始";
        this._control.stopGame();
    }
}
exports.default = GameUI;
},{"./../ui/layaMaxUI":11,"./GameControl":9}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ui;
(function (ui) {
    var test;
    (function (test) {
        class TestSceneUI extends Laya.Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("test/TestScene");
            }
        }
        test.TestSceneUI = TestSceneUI;
        class ViewTestUI extends Laya.View {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.createView(ViewTestUI.uiView);
            }
        }
        ViewTestUI.uiView = { "type": "View", "props": { "width": 1136, "height": 640 }, "compId": 2, "child": [{ "type": "Radio", "props": { "y": 126, "x": 170, "var": "A1", "skin": "comp/radio.png", "label": "A1" }, "compId": 8 }, { "type": "Radio", "props": { "y": 154, "x": 170, "var": "A2", "skin": "comp/radio.png", "label": "A2" }, "compId": 9 }, { "type": "Radio", "props": { "y": 190, "x": 170, "var": "A3", "skin": "comp/radio.png", "label": "A3" }, "compId": 10 }, { "type": "Radio", "props": { "y": 126, "x": 233, "var": "B1", "skin": "comp/radio.png", "label": "B1" }, "compId": 11 }, { "type": "Radio", "props": { "y": 154, "x": 233, "var": "B2", "skin": "comp/radio.png", "label": "B2" }, "compId": 13 }], "loadList": ["comp/radio.png"], "loadList3D": [] };
        test.ViewTestUI = ViewTestUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ArrayUtils {
    static find(arr, cb) {
        for (let i of arr) {
            if (cb(i))
                return i;
        }
        return null;
    }
    /**除重 */
    static unique(arr) {
        let left = 0, right = 0;
        while (left < arr.length) {
            right = arr.lastIndexOf(arr[left], left);
            while (left != right) {
                arr.splice(right);
                right = arr.lastIndexOf(arr[left], left);
            }
            left++;
        }
        return arr;
    }
}
exports.ArrayUtils = ArrayUtils;
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MapStruct {
    constructor() {
        this.keys = [];
        this.values = [];
        this._size = 0;
    }
    clear() {
        this.keys.length = this.values.length = this._size = 0;
    }
    delete(key) {
        let idx = this.keys.indexOf(key);
        if (idx == -1) {
            return false;
        }
        this.keys.splice(idx, 1);
        this.values.splice(idx, 1);
        this._size--;
        return true;
    }
    forEach(callbackfn, thisArg) {
        for (let i = 0, len = this.keys.length; i < len; i++) {
            callbackfn(this.values[i], this.keys[i], this);
        }
    }
    get(key) {
        let idx = this.keys.indexOf(key);
        return this.values[idx];
    }
    has(key) {
        return this.keys.indexOf(key) >= 0;
    }
    set(key, value) {
        let idx = this.keys.indexOf(key);
        if (idx >= 0) {
            this.values[idx] = value;
        }
        else {
            this.keys.push(key);
            this.values.push(value);
            this._size++;
        }
        return this;
    }
    get size() {
        return this._size;
    }
}
exports.MapStruct = MapStruct;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class View1 extends Laya.View {
    constructor() {
        super();
        let lab = new Laya.Label;
        lab.text = "hello";
        lab.color = "#FF0000";
        this.addChild(lab);
        let img = new Laya.Image;
        img.skin = "comp/image.png"; //"test/c1.png"
        this.addChild(img);
    }
}
exports.default = View1;
class View2 extends Laya.View {
    constructor() {
        super();
    }
}
exports.View2 = View2;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RedTipTest_1 = require("../../redTip/RedTipTest");
const View1_1 = require("../View1");
let id = 1;
const map = {};
const panelInstanceMap = {};
/**
 *
 * @param view 注册面板
 * @param dependtenceAtlas 依赖图集
 * @param dependtenceCfgs 依赖配置
 * @returns 面板id
 */
function registerPanel(view, layer, dependtenceAtlas, dependtenceCfgs) {
    let key = id++;
    map[key] = [view, dependtenceAtlas, dependtenceCfgs, layer];
    return key;
}
exports.registerPanel = registerPanel;
function cachePanel(id, panel) {
    panelInstanceMap[id] = panel;
}
exports.cachePanel = cachePanel;
function clearPanel(id) {
    delete panelInstanceMap[id];
}
exports.clearPanel = clearPanel;
/**面板实例 */
function getPanel(id) {
    return panelInstanceMap[id];
}
exports.getPanel = getPanel;
/**面板配置 */
function getPanelVo(id) {
    return map[id];
}
exports.getPanelVo = getPanelVo;
var panelLayer;
(function (panelLayer) {
    panelLayer[panelLayer["base"] = 0] = "base";
    panelLayer[panelLayer["middle"] = 1] = "middle";
    panelLayer[panelLayer["top"] = 2] = "top";
})(panelLayer = exports.panelLayer || (exports.panelLayer = {}));
var PanelRegister;
(function (PanelRegister) {
    PanelRegister[PanelRegister["PANEL1"] = registerPanel(RedTipTest_1.default, panelLayer.base, ["res/atlas/comp.atlas"])] = "PANEL1";
    PanelRegister[PanelRegister["PANEL2"] = registerPanel(View1_1.default, panelLayer.base, ["res/atlas/test.atlas"])] = "PANEL2";
    PanelRegister[PanelRegister["PANEL3"] = registerPanel(View1_1.View2, panelLayer.base)] = "PANEL3";
})(PanelRegister = exports.PanelRegister || (exports.PanelRegister = {}));
},{"../../redTip/RedTipTest":6,"../View1":14}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResourceMgr_1 = require("../../ResourceMgr");
const PanelRegister_1 = require("./PanelRegister");
class ViewMgr extends Laya.EventDispatcher {
    // private historyArr: IView[] = [];
    constructor() {
        super();
        this.currentPanelMap = {}; //各个层级打开的面板
        this.cachePanel = []; //缓存面板
        this.maxCacheNum = 0; //缓存页面数量
        Laya.stage.addChild(this.panelLayer = new Laya.Box);
    }
    static get ins() {
        return ViewMgr._ins || (ViewMgr._ins = new ViewMgr);
    }
    /**
     * 打开面板
     * @param id 注册面板
     * @param args 面板open方法调用参数
     */
    openPanel(id, ...args) {
        let vo = PanelRegister_1.getPanelVo(id);
        if (this.currentPanelMap[vo[3]] === id)
            return;
        this.closePanel(this.currentPanelMap[vo[3]]);
        this.currentPanelMap[vo[3]] = id;
        let dependenceArr = [];
        if (vo[1]) {
            for (let url of vo[1]) {
                ResourceMgr_1.default.ins.addAtlasRefrence(url); //添加图集引用计数
            }
            dependenceArr = dependenceArr.concat(vo[1]);
        }
        vo[2] && (dependenceArr = dependenceArr.concat(vo[2]));
        if (dependenceArr.length)
            Laya.loader.load(dependenceArr, Laya.Handler.create(this, this.loadComplete, [id, ...args]));
        else
            this.loadComplete(id, ...args);
    }
    /**
     * 关闭面板
     * @param id 注册面板id
     */
    closePanel(id) {
        if (!id)
            return;
        let vo = PanelRegister_1.getPanelVo(id);
        if (!vo) {
            console.error(`未注册面板:${id}`);
            return;
        }
        // this.clearPanelDependence(id);
        //加入缓存队列
        let idx = this.cachePanel.indexOf(id);
        if (idx >= 0) {
            this.cachePanel.splice(idx, 1);
        }
        this.cachePanel.push(id);
        this.currentPanelMap[vo[3]] = null;
        let panel = PanelRegister_1.getPanel(id);
        if (panel) {
            panel.removeSelf();
            panel.close();
        }
    }
    /**
     * 尝试销毁面板
     * @param count 销毁数量
     */
    tryDestoryPanel(count = 1) {
        if (this.cachePanel.length <= this.maxCacheNum)
            return;
        let panels = this.cachePanel.splice(0, this.cachePanel.length - this.maxCacheNum <= count ? this.cachePanel.length - this.maxCacheNum : count);
        while (panels.length) {
            let id = panels.pop();
            this.clearPanelDependence(id);
            if (PanelRegister_1.getPanel(id))
                PanelRegister_1.getPanel(id).destroy(true);
            PanelRegister_1.clearPanel(id);
        }
    }
    clearPanelDependence(id) {
        let vo = PanelRegister_1.getPanelVo(id);
        if (vo[1]) {
            for (let k of vo[1]) {
                ResourceMgr_1.default.ins.removeAtlasRefrence(k, true);
            }
        }
    }
    loadComplete(id, ...args) {
        let panel = PanelRegister_1.getPanel(id);
        if (!panel) {
            panel = new (PanelRegister_1.getPanelVo(id)[0]);
            PanelRegister_1.cachePanel(id, panel);
        }
        panel.open(...args);
        let vo = PanelRegister_1.getPanelVo(id);
        if (this.currentPanelMap[vo[3]] === id) {
            this.panelLayer.addChild(panel);
        }
    }
}
exports.default = ViewMgr;
},{"../../ResourceMgr":3,"./PanelRegister":15}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
