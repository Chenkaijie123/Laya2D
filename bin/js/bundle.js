var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MapScene_1 = require("./battle/map/view/MapScene");
const RedTipMgr_1 = require("./redTip/RedTipMgr");
const ViewMgr_1 = require("./view/base/ViewMgr");
const PanelRegister_1 = require("./view/base/PanelRegister");
class App {
    constructor() {
        this.init();
    }
    init() {
        Laya.stage.addChild(this.mapScene = new MapScene_1.default);
        this.viewMgr = ViewMgr_1.default.ins;
        this.redTipMgr = new RedTipMgr_1.default;
        ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL4);
    }
}
exports.default = App;
},{"./battle/map/view/MapScene":11,"./redTip/RedTipMgr":16,"./view/base/PanelRegister":33,"./view/base/ViewMgr":34}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const GameUI_1 = require("./script/GameUI");
const GameControl_1 = require("./script/GameControl");
const Bullet_1 = require("./script/Bullet");
const DropBox_1 = require("./script/DropBox");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/GameControl.ts", GameControl_1.default);
        reg("script/Bullet.ts", Bullet_1.default);
        reg("script/DropBox.ts", DropBox_1.default);
    }
}
GameConfig.width = 720;
GameConfig.height = 1280;
GameConfig.scaleMode = "showall";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "test/Astar.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{"./script/Bullet":18,"./script/DropBox":19,"./script/GameControl":20,"./script/GameUI":21}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
const ResourceMgr_1 = require("./ResourceMgr");
const PanelRegister_1 = require("./view/base/PanelRegister");
const ViewMgr_1 = require("./view/base/ViewMgr");
const App_1 = require("./App");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        // Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        this.onConfigLoaded();
        ResourceMgr_1.default.ins.startCheck();
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene,true,null,Laya.Handler.create(this,this.openScene));
        Main.app = new App_1.default;
        this.createBtn(["btn1", () => { ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL1); }], ["btn2", () => { ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL2); }], ["btn3", () => { ViewMgr_1.default.ins.openPanel(PanelRegister_1.PanelRegister.PANEL3); }]);
    }
    createBtn(...btns) {
        let _x = 0;
        for (let arr of btns) {
            let lab = new Laya.Label;
            lab.color = "#fff";
            lab.text = arr[0];
            Laya.stage.addChild(lab);
            lab.x = _x;
            lab.fontSize = 30;
            _x += 100;
            lab.on(Laya.Event.CLICK, this, arr[1]);
        }
    }
    openScene(sence) {
    }
}
//激活启动类
new Main();
},{"./App":1,"./GameConfig":2,"./ResourceMgr":4,"./view/base/PanelRegister":33,"./view/base/ViewMgr":34}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ViewMgr_1 = require("./view/base/ViewMgr");
/**
 * 散图完全计数管理
 * 图集和序列帧动画中间架构一层大资源计数管理
 */
class ResourceMgr {
    constructor() {
        this.clearAtlasQueue = [];
        this.clearQueue = [];
        this.clearMovieQueue = [];
        //大图集引用计数
        this.atlasMap = {};
        this._movieMap = {};
        this._movieJsonMap = {};
        this._movieRefrenceMap = {};
    }
    static get ins() {
        return ResourceMgr._ins || (ResourceMgr._ins = new ResourceMgr);
    }
    startCheck() {
        Laya.timer.loop(ResourceMgr.checkClearTime, this, this.loopCheckTexture);
        Laya.timer.frameLoop(1, this, this.loopDestroyTexture);
    }
    stopCheck() {
        Laya.timer.clear(this, this.loopCheckTexture);
        Laya.timer.clear(this, this.loopDestroyTexture);
    }
    /**
     * 检测图片资源，如果引用计数为0则添加到销毁队列
     */
    loopCheckTexture() {
        if (this.clearQueue.length)
            return;
        let temp;
        for (let k in Laya.Loader.loadedMap) {
            temp = Laya.Loader.loadedMap[k];
            if (!temp.bitmap)
                continue;
            if (temp["_referenceCount"] == 0 && temp.bitmap["_referenceCount"] == 0) {
                /**简易判断如果是图集就自动不清理（忽略只有一张图片的图集） */
                if (temp.bitmap.width == temp.width
                    && temp.bitmap.height == temp.height) {
                    //压入销毁队列
                    this.clearQueue.push(temp);
                }
            }
        }
        this.addMovieToClearQueue();
    }
    /**
     * 批量销毁图片
     */
    loopDestroyTexture() {
        ViewMgr_1.default.ins.tryDestoryPanel();
        let idx = 0;
        let texture = this.clearQueue.shift();
        while (texture) {
            /**重新判断是否有被引用，避免等待销毁过程中又被引用造成误删 */
            if (texture.bitmap && texture.bitmap["_referenceCount"] == 0) {
                if (texture.url) {
                    // Laya.loader.clearRes(texture.url);
                    this.clearEngineCache(texture.bitmap);
                    idx++;
                }
            }
            if (idx >= ResourceMgr.frameClearCount)
                break;
            texture = this.clearQueue.shift();
        }
        //清理一个大图集
        this.clearOneAtlas();
        //清理一个movie
        this.clearMovieRes();
    }
    //---------------------------------图集---------------------------
    addAtlasRefrence(url) {
        if (this.atlasMap[url]) {
            this.atlasMap[url] = this.atlasMap[url] + 1;
        }
        else {
            this.atlasMap[url] = 1;
        }
    }
    removeAtlasRefrence(url, autoClear = false) {
        if (!this.atlasMap[url]) {
            console.error("图集引用计数逻辑有问题");
        }
        else {
            this.atlasMap[url] = this.atlasMap[url] - 1;
            if (!this.atlasMap[url] && autoClear) {
                this.pushDestoryAtlasQueue(url);
            }
        }
    }
    /**添加清理队列 */
    pushDestoryAtlasQueue(atlas) {
        if (this.clearAtlasQueue.indexOf(atlas) == -1) {
            this.clearAtlasQueue.push(atlas);
        }
    }
    /**执行清理大图集 */
    clearOneAtlas() {
        if (!this.clearAtlasQueue.length)
            return;
        let url;
        //大图集添加引用计数有可能图集还没加载，如果没有资源表示还没加载
        for (let i = 0, len = this.clearAtlasQueue.length; i < len; i++) {
            if (Laya.loader.getRes(this.clearAtlasQueue[i])) {
                url = this.clearAtlasQueue.splice(i, 1)[0];
                break;
            }
        }
        if (url && !this.atlasMap[url]) {
            delete this.atlasMap[url];
            Laya.loader.clearRes(url);
            url = Laya.URL.formatURL(url.substring(0, url.lastIndexOf(".")) + ".png");
            this.clearEngineCache(Laya.loader.getRes(url));
        }
    }
    /**清理引擎的缓存 (彻底清理)*/
    clearEngineCache(texture) {
        if (texture) {
            Laya.Loader.clearRes(texture.url);
            let resource = Laya.Resource.getResourceByID(texture["id"]);
            resource && resource.destroy();
        }
    }
    //-----------------------movie-------------------------
    getMovieResource(path) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._movieMap[path]) {
                yield new Promise((resolve, reject) => {
                    let imgPath = path.replace(".json", ".png");
                    Laya.loader.load([path, imgPath], Laya.Handler.create(this, () => {
                        let texture = Laya.Loader.getRes(imgPath);
                        let json = Laya.loader.getRes(path);
                        if (!texture || !json)
                            reject();
                        let res = {};
                        let cfg;
                        //防止被资源管理当散图清掉
                        texture.width++;
                        for (let k in json.res) {
                            cfg = json.res[k];
                            res[k] = Laya.Texture.create(texture, cfg.x, cfg.y, cfg.w, cfg.h);
                        }
                        this._movieMap[path] = res;
                        this._movieJsonMap[path] = json;
                        resolve();
                    }));
                });
            }
            return Promise.resolve(this._movieMap[path]);
        });
    }
    getMovieJson(path) {
        return this._movieJsonMap[path];
    }
    addMovieRefrence(path) {
        this._movieRefrenceMap[path] = this._movieRefrenceMap[path] ? this._movieRefrenceMap[path] + 1 : 1;
    }
    removeMovieRefrence(path) {
        if (!this._movieRefrenceMap[path]) {
            console.error("Movie资源计数错误");
        }
        this._movieRefrenceMap[path] = this._movieRefrenceMap[path] - 1;
    }
    clearMovieRes() {
        let path;
        while (path = this.clearMovieQueue.pop()) {
            if (this._movieRefrenceMap[path]) {
                break;
            }
        }
        if (!path)
            return;
        delete this._movieRefrenceMap[path];
        //json
        delete this._movieJsonMap[path];
        Laya.Loader.clearRes(path);
        if (this._movieMap[path]) {
            for (let k in this._movieMap[path]) {
                this._movieMap[path][k].destroy();
            }
        }
        //image
        Laya.loader.clearRes(path.replace(".json", ".png"));
    }
    //把引用为0的movie资源加入销毁队列
    addMovieToClearQueue() {
        for (let k in this._movieRefrenceMap) {
            if (!this._movieRefrenceMap[k]) {
                this.clearMovieQueue.indexOf(k) == -1 && this.clearMovieQueue.unshift(k);
            }
        }
    }
}
//每帧销毁资源最大数量
ResourceMgr.frameClearCount = 2;
ResourceMgr.checkClearTime = 1000;
exports.default = ResourceMgr;
},{"./view/base/ViewMgr":34}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 初始化一次寻路的地图 Astar.ins.init()
 * 开启寻路 Astar.ins.findPath()
 *
 */
class AStar {
    constructor() {
        this.openList = [];
        this.closeList = [];
    }
    static get ins() {
        if (!AStar._ins)
            AStar._ins = new AStar;
        return AStar._ins;
    }
    init(arr) {
        AStar.xNum = arr[0].length;
        AStar.yNum = arr.length;
        AStar.mapNodeList = arr;
    }
    /**曼哈顿估价法 */
    manhattan(fromNode, targetNode) {
        return Math.abs(fromNode.x - targetNode.x) * AStar.staticCost + Math.abs(fromNode.y - targetNode.y) * AStar.staticCost;
    }
    /**移动成本，影响走斜对角还是垂直 */
    getG(fromNode, targetNode) {
        return fromNode.x - targetNode.x == 0 || fromNode.y - targetNode.y == 0 ? 10 : 14;
    }
    /**获取周围8格 */
    getAroundNode(node) {
        let x = node.x % AStar.xNum;
        let y = node.y % AStar.yNum;
        let res = [];
        let map = AStar.mapNodeList;
        let temp;
        if (temp = map[y - 1]) {
            if (temp[x - 1]) {
                res.push(temp[x - 1]);
            }
            if (temp[x]) {
                res.push(temp[x]);
            }
            if (temp[x + 1]) {
                res.push(temp[x + 1]);
            }
        }
        if (map[y][x - 1]) {
            res.push(map[y][x - 1]);
        }
        if (map[y][x + 1]) {
            res.push(map[y][x + 1]);
        }
        if (temp = map[y + 1]) {
            if (temp[x - 1]) {
                res.push(temp[x - 1]);
            }
            if (temp[x]) {
                res.push(temp[x]);
            }
            if (temp[x + 1]) {
                res.push(temp[x + 1]);
            }
        }
        return res;
    }
    /**
     *
     * @param fromNode 起始点
     * @param toNode 目标点
     * @param moveType 移动类型，影响可穿越地形
     * @returns
     */
    findPath(fromNode, toNode, moveType) {
        if (fromNode == toNode || moveType < toNode.terrain)
            return [fromNode];
        fromNode.parent = null;
        this.openList.length = this.closeList.length = 0;
        this.openList.push(fromNode);
        fromNode.G = 0;
        let g;
        let index;
        while (fromNode = this.openList.pop()) {
            let around = this.getAroundNode(fromNode);
            this.closeList.push(fromNode);
            for (let node of around) {
                //找到目标
                if (node == toNode) {
                    node.parent = fromNode;
                    return this.parsePath(node);
                }
                if (this.closeList.indexOf(node) >= 0 || moveType < node.terrain)
                    continue;
                g = fromNode.G + this.getG(fromNode, node);
                index = this.openList.indexOf(node);
                if (index == -1) {
                    this.openList.push(node);
                    node.parent = fromNode;
                    node.H = this.manhattan(node, toNode);
                    node.G = g;
                    node.F = node.H + node.G;
                }
                else {
                    if (this.openList[index].G > g) {
                        node.G = g;
                        node.parent = fromNode;
                        node.F = this.openList[index].G + this.openList[index].H;
                    }
                }
            }
            this.openList.sort((a, b) => b.F - a.F);
        }
        return [toNode];
    }
    parsePath(node) {
        let res = [];
        do {
            res.push(node);
            node = node.parent;
        } while (node);
        return res;
    }
}
/**固定消耗 */
AStar.staticCost = 10;
exports.default = AStar;
/**按大小顺序，越大消耗越高 */
var terrain_type;
(function (terrain_type) {
    terrain_type[terrain_type["water"] = 0] = "water";
    terrain_type[terrain_type["normal"] = 1] = "normal";
    terrain_type[terrain_type["fly"] = 2] = "fly";
    terrain_type[terrain_type["unwalk"] = 3] = "unwalk";
})(terrain_type = exports.terrain_type || (exports.terrain_type = {}));
/**可以移动的方式 */
var move_type;
(function (move_type) {
    move_type[move_type["walk"] = 1] = "walk";
    move_type[move_type["fly"] = 2] = "fly";
})(move_type = exports.move_type || (exports.move_type = {}));
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**地图节点数据 */
class MapNode {
    release() {
        this.width = this.height = this.x = this.y =
            this.G = this.H = this.F = 0;
    }
    setTo(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
}
exports.default = MapNode;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MapGridInfo {
}
exports.default = MapGridInfo;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MapMdl {
    static get ins() {
        if (!MapMdl._ins) {
            MapMdl._ins = new MapMdl;
        }
        return MapMdl._ins;
    }
}
exports.default = MapMdl;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AStar_1 = require("../AStar");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
let startPoint = undefined, endPoint = undefined;
class AstarTest extends layaMaxUI_1.ui.test.AstarUI {
    constructor() {
        super();
        this.map = {};
        let arr = [];
        for (let i = 0; i < 30; i++) {
            let rol = [];
            arr.push(rol);
            for (let j = 0; j < 30; j++) {
                let node = new mapNode;
                let sp = new SpNode(node);
                this.map[`${j}_${i}`] = sp;
                sp.terrain = AStar_1.terrain_type.water;
                this.container.addChild(sp);
                sp.x = j * 15;
                sp.y = i * 15;
                node.x = j;
                node.y = i;
                node.width = 10;
                node.height = 10;
                rol.push(node);
            }
        }
        AStar_1.default.ins.init(arr);
        this.starBtn.on(Laya.Event.CLICK, this, () => {
            startPoint = null;
        });
        this.endBtn.on(Laya.Event.CLICK, this, () => {
            endPoint = null;
        });
        this.searchBtn.on(Laya.Event.CLICK, this, () => {
            let res = AStar_1.default.ins.findPath(startPoint, endPoint, AStar_1.move_type.walk);
            const fn = () => {
                if (!res.length) {
                    Laya.timer.clear(this, fn);
                    return;
                }
                let node = res.pop();
                this.map[`${node.x}_${node.y}`].graphics.clear();
            };
            Laya.timer.loop(300, this, fn);
        });
    }
    open(...args) { }
    close() { }
}
exports.default = AstarTest;
class mapNode {
}
class SpNode extends Laya.Box {
    constructor(node) {
        super();
        this.node = node;
        this.width = this.height = 10;
        this.on(Laya.Event.RIGHT_CLICK, this, () => {
            this.terrain = 3;
        });
        this.on(Laya.Event.CLICK, this, () => {
            if (startPoint === null) {
                startPoint = this.node;
                this.graphics.clear();
                return;
            }
            if (endPoint === null) {
                endPoint = this.node;
                this.graphics.clear();
                return;
            }
            if (this._terrain >= AStar_1.terrain_type.unwalk) {
                this._terrain = 0;
            }
            else {
                this._terrain++;
            }
            this.terrain = this._terrain;
        });
    }
    set terrain(type) {
        this._terrain = type;
        this.node.terrain = type;
        let color;
        switch (type) {
            case AStar_1.terrain_type.water:
                color = "#1628ef";
                break;
            case AStar_1.terrain_type.normal:
                color = "#7a80cd";
                break;
            case AStar_1.terrain_type.fly:
                color = "#c37acd";
                break;
            case AStar_1.terrain_type.unwalk:
                color = "#ee0e3b";
                break;
        }
        let s = this.graphics;
        s.clear();
        s.drawCircle(0, 0, 5, color);
    }
}
},{"../../../ui/layaMaxUI":22,"../AStar":5}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MapGrid extends Laya.Image {
    release() {
        this.skin = null;
        this.removeSelf();
    }
}
exports.default = MapGrid;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite = Laya.Sprite;
var Box = Laya.Box;
const PoolUtil_1 = require("../../../utils/pool/PoolUtil");
const AStar_1 = require("../AStar");
const Player_1 = require("../../player/Player");
const MapMdl_1 = require("../model/MapMdl");
const MapUtil_1 = require("./MapUtil");
const MapGridInfo_1 = require("../model/MapGridInfo");
/**[路径，水平个数，竖直个数，格子大小] */
const mapCfg = {
    1: ["./asset/map/80001/", 8, 6, 256],
};
const mapNodeMsg = [250, 250, 8, 4,
    1, 3, 3, 3, 3, 3, 3, 3,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    3, 1, 1, 1, 1, 1, 1, 3
];
/**地图显示层 */
class MapScene extends Sprite {
    constructor() {
        super();
        /**地图上所有的角色 */
        this.playerList = [];
        this.init();
    }
    init() {
        this.addChild(this.mapLayer = new SceneLayer);
        this.addChild(this.playerLayer = new SceneLayer);
        this.mapLayer.on(Laya.Event.CLICK, this, this.mapClik);
        this.ChangeMap(1);
        Laya.timer.frameLoop(1, this, this.loop);
    }
    ChangeMap(id) {
        let cfg = mapCfg[id];
        this.releaseMap();
        let node;
        let index = 1;
        for (let i = 0; i < cfg[2]; i++) {
            for (let j = 0; j < cfg[1]; j++) {
                node = PoolUtil_1.default.MapGrid.create(cfg[0] + index + ".jpg");
                index++;
                node.y = cfg[3] * i;
                node.x = cfg[3] * j;
                this.mapLayer.addChild(node);
            }
        }
        this.width = Laya.stage.width;
        this.height = Laya.stage.height;
        //格子
        let gwid = mapNodeMsg[0];
        let gheig = mapNodeMsg[1];
        let xNum = mapNodeMsg[2];
        let yNum = mapNodeMsg[3];
        let idx = 3;
        MapMdl_1.default.ins.AStarNodeWidth = gwid;
        MapMdl_1.default.ins.AStarNodeHeight = gheig;
        let gridArr = [];
        let rows;
        for (let i = 0; i < xNum; i++) {
            gridArr.push(rows = []);
            for (let j = 0; j < yNum; j++) {
                idx++;
                let info = new MapGridInfo_1.default;
                info.x = i;
                info.y = j;
                info.terrain = mapNodeMsg[idx];
                rows.push(info);
            }
        }
        AStar_1.default.ins.init(MapMdl_1.default.ins.mapNode = gridArr);
    }
    mapClik(e) {
    }
    addPlayer(info, bornX, bornY, control) {
        let player = PoolUtil_1.default.player.create(Player_1.default);
        this.playerList.push(player);
        player.info = info;
        player.x = bornX;
        player.y = bornY;
        player.control = control;
        player.mapNode = MapUtil_1.default.getMapNodeByPos(bornX, bornY);
    }
    loop() {
        let costTime = Laya.timer.delta;
        for (let player of this.playerList) {
            player.loop(costTime);
        }
    }
    releaseMap() {
        let node;
        while (this.mapLayer.numChildren) {
            node = this.getChildAt(0);
            PoolUtil_1.default.MapGrid.release(node);
        }
        let player;
        while (this.playerLayer.numChildren) {
            player = this.getChildAt(0);
            PoolUtil_1.default.player.release(player);
        }
    }
}
exports.default = MapScene;
class SceneLayer extends Box {
    constructor() {
        super();
        this.top = this.left = this.bottom = this.right = 0;
    }
}
},{"../../../utils/pool/PoolUtil":26,"../../player/Player":13,"../AStar":5,"../model/MapGridInfo":7,"../model/MapMdl":8,"./MapUtil":12}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MapMdl_1 = require("../model/MapMdl");
const PlayerView_1 = require("../../player/PlayerView");
class MapUtil {
    /**获取寻路格子 */
    static getMapNodeByPos(x, y) {
        if (!MapMdl_1.default.ins.mapNode)
            return null;
        let _x = Math.floor(x / MapMdl_1.default.ins.AStarNodeWidth);
        let _y = Math.floor(y / MapMdl_1.default.ins.AStarNodeHeight);
        return MapMdl_1.default.ins.mapNode[_y] ? MapMdl_1.default.ins.mapNode[_y][_x] : null;
    }
    /**获取寻路格子中心坐标 */
    static getMapNodeCenterPos(node, point = new Laya.Point) {
        point.x = node.x + (node.width >> 1);
        point.y = node.y + (node.height >> 1);
        return point;
    }
    /**获取方向 */
    static getDirection(startX, startY, endX, endY) {
        let x = startX - endX;
        let y = startY - endY;
        let key = 0;
        let temp;
        if (x > 0) {
            key |= 0b0100;
        }
        else if (x < 0) {
            key |= 0b0001;
        }
        if (y > 0) {
            key |= 0b0010;
        }
        else if (y < 0) {
            key |= 0b0001;
        }
        return MapUtil.dirMap[key];
    }
}
MapUtil.dirMap = {
    [0b1000]: PlayerView_1.direction.up,
    [0b1100]: PlayerView_1.direction.up_right,
    [0b0100]: PlayerView_1.direction.right,
    [0b0110]: PlayerView_1.direction.right_down,
    [0b0010]: PlayerView_1.direction.dwon,
    [0b0011]: PlayerView_1.direction.down_left,
    [0b1001]: PlayerView_1.direction.left_up,
};
exports.default = MapUtil;
},{"../../player/PlayerView":14,"../model/MapMdl":8}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PlayerView_1 = require("./PlayerView");
class Player extends PlayerView_1.default {
    constructor() {
        super(...arguments);
        this.nextPoint = new Laya.Point;
        this.currentPosition = new Laya.Point; //最终目标点
    }
    /**@private */
    loop(costTime) {
    }
    move(x, y) {
    }
    clear() {
        super.clear();
        this.info = null;
    }
    dispose() {
        this.clear();
        this.control.dispose();
        this.control = null;
    }
}
exports.default = Player;
},{"./PlayerView":14}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PoolUtil_1 = require("../../utils/pool/PoolUtil");
class PlayerView extends Laya.Box {
    constructor() {
        super(...arguments);
        this.direction = direction.dwon;
        this.movieMap = new Map;
    }
    sortLayer() {
        this._children.sort((a, b) => a["mvType"] - b["mvType"]);
    }
    setInfo(info) {
        this.appearance = info;
    }
    clear() {
        this.appearance = null;
        this.movieMap.forEach((v) => {
            v.removeSelf();
            PoolUtil_1.default.Movie.release(v);
        });
        this.movieMap.clear();
    }
    play(action, dir = this.direction) {
        this.direction = dir;
        this.action = action;
        this.setAppearance(dir, action);
    }
    setMovie(type, url) {
        let mv = this.movieMap.get(type) || PoolUtil_1.default.Movie.create();
        mv.loopPlay = true;
        mv["mvType"] = type;
        mv.autoPlay = true;
        mv.skin = url;
        this.movieMap.set(type, mv);
        this.addChild(mv);
        this.callLater(this.sortLayer);
    }
    /**设置模型 */
    setAppearance(dir, action) {
        let info = this.appearance;
        if (!info)
            return;
        this.setMovie(player_movie_type.body, this.getUrlByID(info.bodyID, dir, action));
    }
    getUrlByID(id, dir, action) {
        let dirFlag = dir > 4 ? 8 - dir : dir;
        return `asset/${id}${action}${dirFlag}.json`;
    }
}
exports.default = PlayerView;
/**所有序列帧类型，层级 */
var player_movie_type;
(function (player_movie_type) {
    player_movie_type[player_movie_type["body"] = 0] = "body";
    player_movie_type[player_movie_type["weapon"] = 1] = "weapon";
})(player_movie_type = exports.player_movie_type || (exports.player_movie_type = {}));
var direction;
(function (direction) {
    direction[direction["up"] = 0] = "up";
    direction[direction["up_right"] = 1] = "up_right";
    direction[direction["right"] = 2] = "right";
    direction[direction["right_down"] = 3] = "right_down";
    direction[direction["dwon"] = 4] = "dwon";
    direction[direction["down_left"] = 5] = "down_left";
    direction[direction["left"] = 6] = "left";
    direction[direction["left_up"] = 7] = "left_up";
})(direction = exports.direction || (exports.direction = {}));
var action_type;
(function (action_type) {
    action_type[action_type["stand"] = 1] = "stand";
    action_type[action_type["run"] = 2] = "run";
    action_type[action_type["attack"] = 3] = "attack";
})(action_type = exports.action_type || (exports.action_type = {}));
},{"../../utils/pool/PoolUtil":26}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ArrayUtils_1 = require("../utils/ArrayUtils");
const MapStruct_1 = require("../utils/MapStruct");
/**
 * 红点管理
 * 分离显示和数据，每个节点都有一个状态，可以把红点实例与任意节点绑定/解绑
 * 节点可以绑定handle或者通过关系其他节点实现更新，更新是自动的，同时如果有绑定实例，实例的状态也会自动更新
 *
 */
class RedTipBase extends Laya.EventDispatcher {
    constructor() {
        super(...arguments);
        //最近一次子节点触发更新帧id
        this.renderFrameID = 0;
        //一帧内子节点更新触发的次数（所有类型的集合）
        this.childrenChageTime = 0;
        //是否取消子节点触发更新（防止出现死循环）
        this.lockChildrenChange = false;
        // private tempName:string;
        /**关心列表 */
        this.careMap = new MapStruct_1.MapStruct;
        /**红点状态缓存 */
        this.stateMap = new MapStruct_1.MapStruct;
        /**绑定红点实例 */
        this.bindRedTip = new MapStruct_1.MapStruct;
        /**节点与handle映射 */
        this.registerMap = new MapStruct_1.MapStruct;
    }
    static get ins() {
        let s = this;
        return s["_ins_"] || (s["_ins_"] = new s);
    }
    _init() {
        this.init();
    }
    init() {
        throw new Error("在init方法中绑定触发点或者关系节点");
    }
    /**
     * 注册节点更新handle,没注册也不影响，可以只关心其他节点，节点的创建是任意的
     * @param name
     * @param call
     * @param caller
     */
    register(name, fn, caller) {
        this.registerMap.set(name, [fn, caller]);
        return this.bindHandle.bind(this, name);
    }
    /**
     * 绑定外部触发点，比如游戏模块数据层更新数据，绑定红点触发，在调用完register后面直接调用
     */
    bindHandle(name, eventName, dispatcher) {
        dispatcher.on(eventName, this, this.emit, [name]);
        return this.bindHandle.bind(this, name);
    }
    /**
     * 绑定关心节点
     * @param t
     * @returns
     */
    takecare(t) {
        this.temp = t;
        return this;
    }
    /**
     * 绑定本红点管理器的红点节点
     */
    bindName(...flags) {
        this.tempTarget = flags;
        return this;
    }
    /**
     * 关心节点的红点节点名
     */
    care(...flags) {
        //为关系节点添加改变触发handle
        for (let f of flags) {
            this.temp.on(f, this, this.childrenChange, [this.tempTarget]);
        }
        let strArr;
        for (let k of this.tempTarget) {
            let ls = this.careMap.get(k);
            if (ls) {
                let target = ArrayUtils_1.ArrayUtils.find(ls, (v) => {
                    return v[0] == this.temp;
                });
                if (target) {
                    strArr = ArrayUtils_1.ArrayUtils.unique(target[1].concat(flags));
                    target[1].length = 0;
                    target[1].push(...strArr);
                }
                else {
                    ls.push([this.temp, flags]);
                }
            }
            else {
                this.careMap.set(k, [[this.temp, flags]]);
            }
        }
    }
    /**
     * 触发红点计算
     * @param flag
     */
    emit(flag) {
        this.change(flag);
    }
    /**
     * 为红点绑定执行handle
     * @param name 红点名
     * @param redTip 红点实例
     */
    bindRed(name, redTip) {
        let ls = this.bindRedTip.get(name);
        if (!ls) {
            this.bindRedTip.set(name, [redTip]);
        }
        else {
            if (ls.indexOf(redTip) == -1) {
                ls.push(redTip);
            }
        }
        redTip.visible = this.getStatus(name);
    }
    /**
     * 解绑红点，只是解绑红点显示，数据层仍会计算
     * @param name
     * @param redTip
     */
    unBindRed(name, redTip) {
        let ls = this.bindRedTip.get(name);
        if (ls) {
            ls.splice(ls.indexOf(redTip), 1);
        }
    }
    /**
     * 获取红点节点状态
     */
    getStatus(flag) {
        let res = !!this.stateMap.get(flag);
        if (res)
            return true;
        let map = this.careMap.get(flag);
        if (map) {
            for (let t of map) {
                for (let k of t[1]) {
                    if (t[0].getStatus(k))
                        return true;
                }
            }
        }
        return false;
    }
    setRedTip(flag, state) {
        let ls = this.bindRedTip.get(flag);
        if (ls) {
            for (let i of ls) {
                i.visible = state;
            }
        }
    }
    /**子节点状态改变，不会触发新计算，拿缓存 */
    childrenChange(targerFlags, status) {
        if (this.lockChildrenChange)
            return;
        let value = status;
        for (let k of targerFlags) {
            status = value || this.getStatus(k);
            //设置红点实例
            this.setRedTip(k, status);
            //通知父节点
            this.event(k, value);
        }
        //加上验证是否循环关心红点
        let frameID = Laya.stage["_renderCount"];
        if (frameID) {
            if (this.renderFrameID != frameID) {
                this.childrenChageTime = 1;
            }
            else {
                this.childrenChageTime++;
            }
            if (this.childrenChageTime > 1000) { //一帧内触发1000次以上子节点触发更新，表示应该是出现循环引用了
                console.error(this.constructor.name + "一帧触发太多次子节点更新相应，该节点已经停止子节点触发更新，应该是出现循环关心？？？");
                this.lockChildrenChange = true;
            }
        }
    }
    /**本节点状态改变 */
    change(flag) {
        let status = this.calculate(flag);
        this.stateMap.set(flag, status);
        status = status || this.getStatus(flag);
        //更新视图
        this.setRedTip(flag, status);
        //通知父节点
        this.event(flag, status);
    }
    /**重新计算 */
    calculate(flag) {
        if (this.registerMap.has(flag)) {
            let [fn, caller] = this.registerMap.get(flag);
            let res = fn.call(caller);
            // this.stateMap.set(flag, res);
            return res;
        }
        else {
            console.warn(`红点钩子${flag}未添加处理函数`);
            return false;
        }
    }
}
exports.default = RedTipBase;
},{"../utils/ArrayUtils":23,"../utils/MapStruct":24}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RedTipTest_1 = require("./RedTipTest");
class RedTipMgr {
    constructor() {
        this.redArray = [];
        this.init();
    }
    init() {
        this.register();
        for (let i of this.redArray) {
            i._init();
        }
    }
    register() {
        this.redArray = [
            RedTipTest_1.red1.ins,
            RedTipTest_1.red2.ins,
        ];
    }
}
exports.default = RedTipMgr;
},{"./RedTipTest":17}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../ui/layaMaxUI");
const RedTipBase_1 = require("./RedTipBase");
class RedTipTest extends layaMaxUI_1.ui.test.ViewTestUI {
    constructor() {
        super();
        this.loop();
    }
    open() {
        let img = new Laya.Image;
        img.skin = "comp/image.png";
        this.addChild(img);
    }
    createView(view) {
        super.createView(view);
        red1.ins.bindRed("A1", this.A1);
        red1.ins.bindRed("A2", this.A2);
        red1.ins.bindRed("A3", this.A3);
        red2.ins.bindRed("B1", this.B1);
        red2.ins.bindRed("B2", this.B2);
    }
    loop() {
        Laya.timer.loop(500, this, () => {
            // red1.ins.emit("A2")
            // red1.ins.emit("A1")
            // red1.ins.emit("A3")
            // red2.ins.emit("B1")
            // red2.ins.emit("B2")
            TestMDl.ins.event("UPDATE_INFO");
            TestMDl.ins.event("UPDATE_LV");
        });
    }
}
exports.default = RedTipTest;
class red1 extends RedTipBase_1.default {
    constructor() {
        super();
    }
    init() {
        //绑定handle，触发点
        this.register("A2", this.A2, this)("UPDATE_INFO", TestMDl.ins)("UPDATE_LV", TestMDl.ins);
        this.register("A3", this.A3, this)("UPDATE_LV", TestMDl.ins);
        //构建关心列表
        this.takecare(red2.ins).bindName("A2").care("B1", "B2");
        this.takecare(red2.ins).bindName("A1").care("B1", "B2");
    }
    A1() {
        let a = 0;
        for (let i = 0; i < 100000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
    A2() {
        let a = 0;
        for (let i = 0; i < 100000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
    A3() {
        let a = 0;
        for (let i = 0; i < 100000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
}
exports.red1 = red1;
class red2 extends RedTipBase_1.default {
    constructor() {
        super();
    }
    init() {
        this.register("B1", this.B1, this)("UPDATE_LV", TestMDl.ins);
        this.register("B2", this.B2, this)("UPDATE_INFO", TestMDl.ins);
        this.takecare(red1.ins).bindName("B1").care("A1");
    }
    B1() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
    B2() {
        let a = 0;
        for (let i = 0; i < 10000; i++) {
            a++;
        }
        return Math.random() > 0.5;
    }
}
exports.red2 = red2;
class TestMDl extends Laya.EventDispatcher {
    static get ins() {
        return TestMDl["_ins"] || (TestMDl["_ins"] = new TestMDl);
    }
}
},{"../ui/layaMaxUI":22,"./RedTipBase":15}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 子弹脚本，实现子弹飞行逻辑及对象池回收机制
 */
class Bullet extends Laya.Script {
    constructor() { super(); }
    onEnable() {
        //设置初始速度
        var rig = this.owner.getComponent(Laya.RigidBody);
        rig.setVelocity({ x: 0, y: -10 });
    }
    onTriggerEnter(other, self, contact) {
        //如果被碰到，则移除子弹
        this.owner.removeSelf();
    }
    onUpdate() {
        //如果子弹超出屏幕，则移除子弹
        if (this.owner.y < -10) {
            this.owner.removeSelf();
        }
    }
    onDisable() {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("bullet", this.owner);
    }
}
exports.default = Bullet;
},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameUI_1 = require("./GameUI");
/**
 * 掉落盒子脚本，实现盒子碰撞及回收流程
 */
class DropBox extends Laya.Script {
    constructor() {
        super();
        /**盒子等级 */
        this.level = 1;
    }
    onEnable() {
        /**获得组件引用，避免每次获取组件带来不必要的查询开销 */
        this._rig = this.owner.getComponent(Laya.RigidBody);
        this.level = Math.round(Math.random() * 5) + 1;
        this._text = this.owner.getChildByName("levelTxt");
        this._text.text = this.level + "";
    }
    onUpdate() {
        //让持续盒子旋转
        this.owner.rotation++;
    }
    onTriggerEnter(other, self, contact) {
        var owner = this.owner;
        if (other.label === "buttle") {
            //碰撞到子弹后，增加积分，播放声音特效
            if (this.level > 1) {
                this.level--;
                this._text.changeText(this.level + "");
                owner.getComponent(Laya.RigidBody).setVelocity({ x: 0, y: -10 });
                Laya.SoundManager.playSound("sound/hit.wav");
            }
            else {
                if (owner.parent) {
                    let effect = Laya.Pool.getItemByCreateFun("effect", this.createEffect, this);
                    effect.pos(owner.x, owner.y);
                    owner.parent.addChild(effect);
                    effect.play(0, true);
                    owner.removeSelf();
                    Laya.SoundManager.playSound("sound/destroy.wav");
                }
            }
            GameUI_1.default.instance.addScore(1);
        }
        else if (other.label === "ground") {
            //只要有一个盒子碰到地板，则停止游戏
            owner.removeSelf();
            GameUI_1.default.instance.stopGame();
        }
    }
    /**使用对象池创建爆炸动画 */
    createEffect() {
        let ani = new Laya.Animation();
        ani.loadAnimation("test/TestAni.ani");
        ani.on(Laya.Event.COMPLETE, null, recover);
        function recover() {
            ani.removeSelf();
            Laya.Pool.recover("effect", ani);
        }
        return ani;
    }
    onDisable() {
        //盒子被移除时，回收盒子到对象池，方便下次复用，减少对象创建开销。
        Laya.Pool.recover("dropBox", this.owner);
    }
}
exports.default = DropBox;
},{"./GameUI":21}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 游戏控制脚本。定义了几个dropBox，bullet，createBoxInterval等变量，能够在IDE显示及设置该变量
 * 更多类型定义，请参考官方文档
 */
class GameControl extends Laya.Script {
    constructor() {
        super();
        /** @prop {name:createBoxInterval,tips:"间隔多少毫秒创建一个下跌的容器",type:int,default:1000}*/
        this.createBoxInterval = 1000;
        /**开始时间*/
        this._time = 0;
        /**是否已经开始游戏 */
        this._started = false;
    }
    onEnable() {
        this._time = Date.now();
        this._gameBox = this.owner.getChildByName("gameBox");
        this.createBox();
    }
    onUpdate() {
        //每间隔一段时间创建一个盒子
        let now = Date.now();
        if (now - this._time > this.createBoxInterval) {
            this._time = now;
            this.createBox();
        }
    }
    createBox() {
        //使用对象池创建盒子
        let box = Laya.Pool.getItemByCreateFun("dropBox", this.dropBox.create, this.dropBox);
        box.pos(Math.random() * (Laya.stage.width - 100), -100);
        this._gameBox.addChild(box);
    }
    onStageClick(e) {
        //停止事件冒泡，提高性能，当然也可以不要
        // e.stopPropagation();
        //舞台被点击后，使用对象池创建子弹
        let flyer = Laya.Pool.getItemByCreateFun("bullet", this.bullet.create, this.bullet);
        flyer.pos(Laya.stage.mouseX, Laya.stage.mouseY);
        this._gameBox.addChild(flyer);
        console.log("click");
    }
    /**开始游戏，通过激活本脚本方式开始游戏*/
    startGame() {
        if (!this._started) {
            this._started = true;
            this.enabled = true;
        }
    }
    /**结束游戏，通过非激活本脚本停止游戏 */
    stopGame() {
        this._started = false;
        this.enabled = false;
        this.createBoxInterval = 1000;
        this._gameBox.removeChildren();
    }
}
exports.default = GameControl;
},{}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("./../ui/layaMaxUI");
const GameControl_1 = require("./GameControl");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
class GameUI extends layaMaxUI_1.ui.test.TestSceneUI {
    constructor() {
        super();
        GameUI.instance = this;
        //关闭多点触控，否则就无敌了
        Laya.MouseManager.multiTouchEnabled = false;
    }
    onEnable() {
        this._control = this.getComponent(GameControl_1.default);
        //点击提示文字，开始游戏
        this.tipLbll.on(Laya.Event.CLICK, this, this.onTipClick);
    }
    onTipClick(e) {
        this.tipLbll.visible = false;
        this._score = 0;
        this.scoreLbl.text = "";
        this._control.startGame();
    }
    /**增加分数 */
    addScore(value = 1) {
        this._score += value;
        this.scoreLbl.changeText("分数：" + this._score);
        //随着分数越高，难度增大
        if (this._control.createBoxInterval > 600 && this._score % 20 == 0)
            this._control.createBoxInterval -= 20;
    }
    /**停止游戏 */
    stopGame() {
        this.tipLbll.visible = true;
        this.tipLbll.text = "游戏结束了，点击屏幕重新开始";
        this._control.stopGame();
    }
}
exports.default = GameUI;
},{"./../ui/layaMaxUI":22,"./GameControl":20}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ui;
(function (ui) {
    var test;
    (function (test) {
        class AstarUI extends Laya.View {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.createView(AstarUI.uiView);
            }
        }
        AstarUI.uiView = { "type": "View", "props": { "width": 1136, "height": 640 }, "compId": 2, "child": [{ "type": "Box", "props": { "var": "container", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 4 }, { "type": "Button", "props": { "y": 70, "x": 350, "var": "starBtn", "skin": "comp/button.png", "label": "start" }, "compId": 6 }, { "type": "Button", "props": { "y": 70, "x": 482, "var": "endBtn", "skin": "comp/button.png", "label": "endBtn" }, "compId": 7 }, { "type": "Button", "props": { "y": 70, "x": 603, "var": "searchBtn", "skin": "comp/button.png", "label": "search" }, "compId": 8 }], "loadList": ["comp/button.png"], "loadList3D": [] };
        test.AstarUI = AstarUI;
        class TestSceneUI extends Laya.Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("test/TestScene");
            }
        }
        test.TestSceneUI = TestSceneUI;
        class ViewTestUI extends Laya.View {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.createView(ViewTestUI.uiView);
            }
        }
        ViewTestUI.uiView = { "type": "View", "props": { "width": 1136, "height": 640 }, "compId": 2, "child": [{ "type": "Radio", "props": { "y": 126, "x": 170, "var": "A1", "skin": "comp/radio.png", "label": "A1" }, "compId": 8 }, { "type": "Radio", "props": { "y": 154, "x": 170, "var": "A2", "skin": "comp/radio.png", "label": "A2" }, "compId": 9 }, { "type": "Radio", "props": { "y": 190, "x": 170, "var": "A3", "skin": "comp/radio.png", "label": "A3" }, "compId": 10 }, { "type": "Radio", "props": { "y": 126, "x": 233, "var": "B1", "skin": "comp/radio.png", "label": "B1" }, "compId": 11 }, { "type": "Radio", "props": { "y": 154, "x": 233, "var": "B2", "skin": "comp/radio.png", "label": "B2" }, "compId": 13 }], "loadList": ["comp/radio.png"], "loadList3D": [] };
        test.ViewTestUI = ViewTestUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ArrayUtils {
    static find(arr, cb) {
        for (let i of arr) {
            if (cb(i))
                return i;
        }
        return null;
    }
    /**除重 */
    static unique(arr) {
        return Array.from(new Set(arr));
    }
}
exports.ArrayUtils = ArrayUtils;
},{}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MapStruct {
    constructor() {
        this.keys = [];
        this.values = [];
        this._size = 0;
    }
    clear() {
        this.keys.length = this.values.length = this._size = 0;
    }
    delete(key) {
        let idx = this.keys.indexOf(key);
        if (idx == -1) {
            return false;
        }
        this.keys.splice(idx, 1);
        this.values.splice(idx, 1);
        this._size--;
        return true;
    }
    forEach(callbackfn, thisArg) {
        for (let i = 0, len = this.keys.length; i < len; i++) {
            callbackfn(this.values[i], this.keys[i], this);
        }
    }
    get(key) {
        let idx = this.keys.indexOf(key);
        return this.values[idx];
    }
    has(key) {
        return this.keys.indexOf(key) >= 0;
    }
    set(key, value) {
        let idx = this.keys.indexOf(key);
        if (idx >= 0) {
            this.values[idx] = value;
        }
        else {
            this.keys.push(key);
            this.values.push(value);
            this._size++;
        }
        return this;
    }
    get size() {
        return this._size;
    }
}
exports.MapStruct = MapStruct;
},{}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PoolBase {
    constructor() {
        this.pool = [];
    }
    static get ins() {
        let t = this;
        if (!t["_ins"])
            t["_ins"] = new t;
        return t["_ins"];
    }
    create(...args) { }
    release(node) { }
}
exports.PoolBase = PoolBase;
},{}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MapNodePool_1 = require("./item/MapNodePool");
const MapGridPool_1 = require("./item/MapGridPool");
const MoviePool_1 = require("./item/MoviePool");
const PlayerPool_1 = require("./item/PlayerPool");
class PoolUtil {
    static get MapNode() {
        return MapNodePool_1.default.ins;
    }
    static get MapGrid() {
        return MapGridPool_1.default.ins;
    }
    static get Movie() {
        return MoviePool_1.default.ins;
    }
    static get player() {
        return PlayerPool_1.default.ins;
    }
}
exports.default = PoolUtil;
},{"./item/MapGridPool":27,"./item/MapNodePool":28,"./item/MoviePool":29,"./item/PlayerPool":30}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MapGrid_1 = require("../../../battle/map/view/MapGrid");
const PoolBase_1 = require("../PoolBase");
class MapGridPool extends PoolBase_1.PoolBase {
    create(skin) {
        let node = this.pool.pop() || new MapGrid_1.default;
        node.skin = skin;
        return node;
    }
    release(node) {
        node.release();
        this.pool.push(node);
    }
}
exports.default = MapGridPool;
},{"../../../battle/map/view/MapGrid":10,"../PoolBase":25}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MapNode_1 = require("../../../battle/map/MapNode");
const PoolBase_1 = require("../PoolBase");
class MapNodePool extends PoolBase_1.PoolBase {
    create(x, y, width, height) {
        let node = this.pool.pop() || new MapNode_1.default;
        node.setTo(x, y, width, height);
        return node;
    }
    release(node) {
        node.release();
        this.pool.push(node);
    }
}
exports.default = MapNodePool;
},{"../../../battle/map/MapNode":6,"../PoolBase":25}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PoolBase_1 = require("../PoolBase");
const Movie_1 = require("../../../view/Movie/Movie");
class MoviePool extends PoolBase_1.PoolBase {
    create() {
        let node = this.pool.pop() || new Movie_1.default;
        return node;
    }
    release(node) {
        node.clear();
        this.pool.push(node);
    }
}
exports.default = MoviePool;
},{"../../../view/Movie/Movie":31,"../PoolBase":25}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PoolBase_1 = require("../PoolBase");
const PlayerView_1 = require("../../../battle/player/PlayerView");
class PlayerPool extends PoolBase_1.PoolBase {
    create(clz = PlayerView_1.default) {
        let node = this.pool.pop() || new clz;
        return node;
    }
    release(node) {
        node.clear();
        this.pool.push(node);
    }
}
exports.default = PlayerPool;
},{"../../../battle/player/PlayerView":14,"../PoolBase":25}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite = Laya.Sprite;
var AutoBitmap = laya.ui.AutoBitmap;
const ResourceMgr_1 = require("../../ResourceMgr");
class Movie extends Sprite {
    constructor() {
        super();
        this.frameRace = 2;
        this._index = 0;
        this._frameNum = 0;
        this._loopPlay = false;
        this._autoPlay = true;
        this._isPlaying = false;
        this.loadComplete = false;
        this.graphics = this.bitMap = new AutoBitmap;
    }
    get frameNum() { return this._frameNum; }
    get loopPlay() { return this._loopPlay; }
    set loopPlay(v) {
        this._loopPlay = v;
        this.play();
    }
    get autoPlay() { return this._autoPlay; }
    set autoPlay(v) { this._autoPlay = v; }
    set skin(v) {
        if (this._skin == v)
            return;
        this.clear();
        this._skin = v;
        this.setSkin(v);
    }
    get skin() { return this._skin; }
    /***加载序列帧资源 */
    setSkin(path) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!path)
                return;
            ResourceMgr_1.default.ins.addMovieRefrence(path);
            let res = yield ResourceMgr_1.default.ins.getMovieResource(path);
            if (this._skin != path) {
                ResourceMgr_1.default.ins.removeMovieRefrence(path);
            }
            else {
                this.event(Movie.LOAD_COMPLETE);
                this.loadComplete = true;
                this.cfg = ResourceMgr_1.default.ins.getMovieJson(path);
                this.bitMapSource = res;
                this._frameNum = this.cfg.mc.frames.length;
                this.frameRace == 0 && (this.frameRace = +this.cfg.mc.frameRate);
                this.index = this._index;
                if (this._autoPlay) {
                    this.play();
                }
            }
        });
    }
    loopRefresh() {
        if (!this.loadComplete)
            return;
        if (this._frameNum <= ++this._index) {
            if (this._loopPlay) {
                this.index = 0;
                this.event(Movie.LOOP_COMPLETE);
            }
            else {
                this.event(Movie.PLAY_COMPLETE);
                this.clear();
            }
        }
        else {
            this.index = this._index;
            this.event(Movie.UPDATE, this._index);
        }
    }
    set index(v) {
        this._index = v;
        if (this.loadComplete) {
            if (v >= this.frameNum)
                this._index = v = this.frameNum - 1;
            let cfg = this.cfg.mc.frames[v];
            this.bitMap.source = this.bitMapSource[cfg.res];
            this.bitMap.source.offsetX = cfg.x;
            this.bitMap.source.offsetY = cfg.y;
        }
    }
    get index() {
        return this._index;
    }
    play(startIndex = 0) {
        this.index = startIndex;
        if (this._isPlaying)
            return;
        this._isPlaying = true;
        Laya.timer.frameLoop(this.frameRace, this, this.loopRefresh);
    }
    stop() {
        if (!this._isPlaying)
            return;
        this._isPlaying = false;
        Laya.timer.clear(this, this.loopRefresh);
    }
    clear() {
        this.bitMapSource = this.cfg = null;
        this.bitMap.source = this._skin = null;
        this._frameNum = this.frameRace = 0;
        this.loadComplete = false;
        this._autoPlay = true;
        this._skin && ResourceMgr_1.default.ins.removeMovieRefrence(this._skin);
        this.stop();
    }
}
/***更新一帧 */
Movie.UPDATE = "UPDATE";
/**加载完成 */
Movie.LOAD_COMPLETE = "LOAD_COMPLETE";
/**播放完成 */
Movie.PLAY_COMPLETE = "PLAY_COMPLETE";
/**完成一轮循环 */
Movie.LOOP_COMPLETE = "LOOP_COMPLETE";
exports.default = Movie;
},{"../../ResourceMgr":4}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class View1 extends Laya.View {
    constructor() {
        super();
        let lab = new Laya.Label;
        lab.text = "hello";
        lab.color = "#FF0000";
        this.addChild(lab);
        let img = new Laya.Image;
        img.skin = "comp/image.png"; //"test/c1.png"
        this.addChild(img);
    }
}
exports.default = View1;
class View2 extends Laya.View {
    constructor() {
        super();
    }
}
exports.View2 = View2;
},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RedTipTest_1 = require("../../redTip/RedTipTest");
const View1_1 = require("../View1");
const AstarTest_1 = require("../../battle/map/test/AstarTest");
let id = 1;
const map = {};
const panelInstanceMap = {};
/**
 *
 * @param view 注册面板
 * @param dependtenceAtlas 依赖图集
 * @param dependtenceCfgs 依赖配置
 * @returns 面板id
 */
function registerPanel(view, layer, dependtenceAtlas, dependtenceCfgs) {
    let key = id++;
    map[key] = [view, dependtenceAtlas, dependtenceCfgs, layer];
    return key;
}
exports.registerPanel = registerPanel;
function cachePanel(id, panel) {
    panelInstanceMap[id] = panel;
}
exports.cachePanel = cachePanel;
function clearPanel(id) {
    delete panelInstanceMap[id];
}
exports.clearPanel = clearPanel;
/**面板实例 */
function getPanel(id) {
    return panelInstanceMap[id];
}
exports.getPanel = getPanel;
/**面板配置 */
function getPanelVo(id) {
    return map[id];
}
exports.getPanelVo = getPanelVo;
var panelLayer;
(function (panelLayer) {
    panelLayer[panelLayer["base"] = 0] = "base";
    panelLayer[panelLayer["middle"] = 1] = "middle";
    panelLayer[panelLayer["top"] = 2] = "top";
})(panelLayer = exports.panelLayer || (exports.panelLayer = {}));
var PanelRegister;
(function (PanelRegister) {
    PanelRegister[PanelRegister["PANEL1"] = registerPanel(RedTipTest_1.default, panelLayer.base, ["res/atlas/comp.atlas"])] = "PANEL1";
    PanelRegister[PanelRegister["PANEL2"] = registerPanel(View1_1.default, panelLayer.base, ["res/atlas/test.atlas"])] = "PANEL2";
    PanelRegister[PanelRegister["PANEL3"] = registerPanel(View1_1.View2, panelLayer.base)] = "PANEL3";
    PanelRegister[PanelRegister["PANEL4"] = registerPanel(AstarTest_1.default, panelLayer.base, ["res/atlas/comp.atlas"])] = "PANEL4";
})(PanelRegister = exports.PanelRegister || (exports.PanelRegister = {}));
},{"../../battle/map/test/AstarTest":9,"../../redTip/RedTipTest":17,"../View1":32}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResourceMgr_1 = require("../../ResourceMgr");
const PanelRegister_1 = require("./PanelRegister");
class ViewMgr extends Laya.EventDispatcher {
    // private historyArr: IView[] = [];
    constructor() {
        super();
        this.currentPanelMap = {}; //各个层级打开的面板
        this.cachePanel = []; //缓存面板
        this.maxCacheNum = 0; //缓存页面数量
        Laya.stage.addChild(this.panelLayer = new Laya.Box);
    }
    static get ins() {
        return ViewMgr._ins || (ViewMgr._ins = new ViewMgr);
    }
    /**
     * 打开面板
     * @param id 注册面板
     * @param args 面板open方法调用参数
     */
    openPanel(id, ...args) {
        let vo = PanelRegister_1.getPanelVo(id);
        if (this.currentPanelMap[vo[3]] === id)
            return;
        this.closePanel(this.currentPanelMap[vo[3]]);
        this.currentPanelMap[vo[3]] = id;
        let dependenceArr = [];
        if (vo[1]) {
            for (let url of vo[1]) {
                ResourceMgr_1.default.ins.addAtlasRefrence(url); //添加图集引用计数
            }
            dependenceArr = dependenceArr.concat(vo[1]);
        }
        vo[2] && (dependenceArr = dependenceArr.concat(vo[2]));
        if (dependenceArr.length)
            Laya.loader.load(dependenceArr, Laya.Handler.create(this, this.loadComplete, [id, ...args]));
        else
            this.loadComplete(id, ...args);
    }
    /**
     * 关闭面板
     * @param id 注册面板id
     */
    closePanel(id) {
        if (!id)
            return;
        let vo = PanelRegister_1.getPanelVo(id);
        if (!vo) {
            console.error(`未注册面板:${id}`);
            return;
        }
        // this.clearPanelDependence(id);
        //加入缓存队列
        let idx = this.cachePanel.indexOf(id);
        if (idx >= 0) {
            this.cachePanel.splice(idx, 1);
        }
        this.cachePanel.push(id);
        this.currentPanelMap[vo[3]] = null;
        let panel = PanelRegister_1.getPanel(id);
        if (panel) {
            panel.removeSelf();
            panel.close();
        }
    }
    /**
     * 尝试销毁面板
     * @param count 销毁数量
     */
    tryDestoryPanel(count = 1) {
        if (this.cachePanel.length <= this.maxCacheNum)
            return;
        let panels = this.cachePanel.splice(0, this.cachePanel.length - this.maxCacheNum <= count ? this.cachePanel.length - this.maxCacheNum : count);
        while (panels.length) {
            let id = panels.pop();
            this.clearPanelDependence(id);
            if (PanelRegister_1.getPanel(id))
                PanelRegister_1.getPanel(id).destroy(true);
            PanelRegister_1.clearPanel(id);
        }
    }
    clearPanelDependence(id) {
        let vo = PanelRegister_1.getPanelVo(id);
        if (vo[1]) {
            for (let k of vo[1]) {
                ResourceMgr_1.default.ins.removeAtlasRefrence(k, true);
            }
        }
    }
    loadComplete(id, ...args) {
        let panel = PanelRegister_1.getPanel(id);
        if (!panel) {
            panel = new (PanelRegister_1.getPanelVo(id)[0]);
            PanelRegister_1.cachePanel(id, panel);
        }
        panel.open(...args);
        let vo = PanelRegister_1.getPanelVo(id);
        if (this.currentPanelMap[vo[3]] === id) {
            this.panelLayer.addChild(panel);
        }
    }
}
exports.default = ViewMgr;
},{"../../ResourceMgr":4,"./PanelRegister":33}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
